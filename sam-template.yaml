AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Metadata:
  'AWS::ServerlessRepo::Application':
    Name: SparkOnLambda
    Description: 'This lambda enables you to run spark on lambda'
    Author: 'default author'
    SpdxLicenseId: MIT-0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels:
      - spark
      - lambda
    HomePageUrl: 'https://github.com/aws-samples/spark-on-aws-lambda'
    SemanticVersion: 1.1.0
    SourceCodeUrl: 'https://github.com/aws-samples/spark-on-aws-lambda'

  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Mandatory"
        Parameters:
#          - SparkVersion
          - CodeArtefactLocation
          - LambdaTimeout
          - LambdaMemory
          - AttachToVpc
      -
        Label:
          default: "Optional"
        Parameters:
          - SparkLambdapermissionPolicyArn
          - SecurityGroupIds
          - SubnetIds
          - ImageUri



Parameters:
#  SparkVersion:
#    Type: String
#    Default: 3.3.0
#    AllowedValues:
#      - 3.3.0
  CodeArtefactLocation:
    Type: String
    Default: s3://aug-edp-datapipeline/xxxxxx
    Description: Bucket to store audit stats file
#  LambdaFunctionName:
#    Description: 'This is the name of the lambda function that will be created. This name must satisfy the pattern ^[a-z0-9-_]{1,64}$'
#    Type: String
#    AllowedPattern: ^[a-z0-9-_]{1,64}$
#    Default: SparkOnAWSLambda
  LambdaTimeout:
    Description: 'Maximum Lambda invocation runtime in seconds. (min 1 - 900 max)'
    Default: 900
    Type: Number
  LambdaMemory:
    Description: 'Lambda memory in MB (min 128 - 3008 max).'
    Default: 3008
    Type: Number
  SparkLambdapermissionPolicyArn:
    Description: 'Arn of the policy that contains the permissions defined for this lambda'
    Type: String
    Default: ''
  AttachToVpc:
    Type: String
    Description: 'Set True or False to imply VPC Connectivity'
    Default: False
    AllowedValues:
      - True
      - False
  SecurityGroupIds:
    Description: 'One or more SecurityGroup IDs corresponding to the SecurityGroup that should be applied to the Lambda function. (e.g. sg1,sg2,sg3).Only used if AttachToVpc is True'
    Type: 'CommaDelimitedList'
    Default: ''
  SubnetIds:
    Description: 'One or more Subnet IDs corresponding to the Subnet that the Lambda function can use to access you data source. (e.g. subnet1,subnet2).Only used if AttachToVpc is True'
    Type: 'CommaDelimitedList'
    Default: ''
#  ImageVersion:
#    Description: 'Version number of the image to be pushed to ecr'
#    Type: String
#    Default: 1
  ImageUri:
    Description: 'ECR Uri for the image.If not specififed, a code build project will be provisioned to build the default image that will be pushed to ECR'
    Type: String
    Default: ''

Conditions:
  NeedsVPC:  !Equals [ !Ref AttachToVpc, 'True' ]
  NeedsAdditionalPolicy: !Not [ !Equals [ !Ref SparkLambdapermissionPolicyArn, '' ]]
  NeedsImageBuild: !Not [ !Equals [ !Ref ImageUri, '' ]]

Resources:

  ImageBuild:
    Condition: NeedsImageBuild
    Type: 'AWS::CodeBuild::Project'

  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: 'Role used by the lambda running spark'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - !If
            - NeedsAdditionalPolicy
            - SparkLambdapermissionPolicyArn
            - !Ref "AWS::NoValue"
        - !If
            - NeedsVPC
            - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
            - !Ref "AWS::NoValue"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'

  LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub 'SparkOnLmandaContainerPolicy-${AWS::StackName}'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
            Resource: '*'
      Roles:
        - !Ref LambdaRole


  SparkLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: Image
      ImageUri: !Ref ImageUri
      ImageConfig:
        Command: [ "sparkOnAWSLambda.lambda_handler" ]
      Description: "Initial Test"
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemory
      Role: !GetAtt LambdaRole.Arn
      VpcConfig:
        !If
          - NeedsVPC
          -
            SecurityGroupIds: !Ref SecurityGroupIds
            SubnetIds: !Ref SubnetIds
          - !Ref "AWS::NoValue"
#    Metadata:
#      Dockerfile: Dockerfile
#      DockerContext: .
#      DockerTag: !Sub '${SparkVersion}v${ImageVersion}'


